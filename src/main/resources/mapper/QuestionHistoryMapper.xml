<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.moe.smiling.datasource.mapper.QuestionHistoryMapper">

    <select id="questionPage" resultType="cn.edu.moe.smiling.datasource.vo.QuestionVo">
        SELECT q.id,
               q.question as content,
               q.answer,
               q.chat_no,
               q.create_time as created_at,
               f.feedback,
               f.bad_reason,
               u.nickname as username
        FROM chatdata_sys.question_history q
                 LEFT JOIN (SELECT history_id, feedback, bad_reason FROM chatdata_sys.question_feedback WHERE id IN (SELECT Max(id) FROM chatdata_sys.question_feedback GROUP BY history_id)) f
                           ON q.id = f.history_id
        LEFT JOIN user_security.user_bind_third_login u ON q.user_id = u.id
        WHERE q.del_state = 0
        <if test="username != null and username != ''">
            AND u.nickname LIKE CONCAT('%', #{username}, '%')
        </if>
        <if test="chatNo != null and chatNo != ''">
            AND q.chat_no = #{chatNo}
        </if>
        <if test="startTime != null">
            AND q.create_time &gt;= #{startTime}
        </if>
        <if test="endTime != null">
            AND q.create_time &lt;= #{endTime}
        </if>
        ORDER BY q.create_time DESC

    </select>

    <select id="queryAnswer" resultType="java.lang.String">
        SELECT q.answer
        FROM question_history q
                 LEFT JOIN question_feedback f
                           ON q.id = f.history_id
        WHERE q.question = #{q}
          AND (f.feedback != 'bad'
            OR f.feedback IS NULL)
          AND q.create_time > NOW() - INTERVAL #{hour} HOUR
          AND q.del_state = 0
        ORDER BY q.create_time DESC LIMIT 1
    </select>

    <select id="historyList" resultType="cn.edu.moe.smiling.datasource.vo.QuestionHistoryVo">
        SELECT q.id, chat_no, question, answer, user_id, create_time, update_time,
                     f.feedback,
                     f.bad_reason
              FROM question_history q
                       LEFT JOIN (SELECT history_id, feedback, bad_reason
                                  FROM question_feedback
                                  WHERE id IN (SELECT Max(id) FROM question_feedback GROUP BY history_id)) f
                                 ON q.id = f.history_id
              WHERE q.user_id = #{uid}
                AND q.del_state = 0
                AND q.chat_no = #{chatNo}
              ORDER BY q.create_time DESC
                  LIMIT 10

    </select>

</mapper>